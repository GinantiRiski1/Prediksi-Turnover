# -*- coding: utf-8 -*-
"""Prediksi_Turnover.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R1BRgGa8qL3yWfM8b8mAJpTk_sS8sZrW

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Jaya Jaya Maju

- Nama: Ginanti Riski
- Email: a788xbm186@devacademy.id
- Id Dicoding: a788xbm186

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.utils import resample
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score
import joblib

"""### Menyiapkan data yang akan diguankan"""

df = pd.read_csv('employee_data.csv')

"""## Data Understanding

Disini kita melihat banyak baris yang tertulis sebagai `NaN` atau `Null` artinya ada data yang kosong atau tidak lengkap.
"""

df.head()

"""Dari hasil pengecekkan bahwa data employee ini terdiri dari 1470 data, namun pada variabel `Attrition` hanya terdapat 1058, artinya ada 412 data kosong didalam `Attrition`"""

df.info()

"""Dan benar setelah dicek, ada 412 data yang hilang pada variabel `Attrition`, maka kita perlu tangani nanti pada tahap preprocessing agar model dapat belajar dengan baik"""

df.isnull().sum()

"""Dari hasil pengecekkan, tidak terdapat data yang duplikat pada dataframe `df`"""

df.duplicated().sum()

"""**Hasil Analisis:**

1. Permasalahan pada Data

- **Missing Values pada Target (`Attrition`)**
  - Jumlah data pada `Attrition` hanya 1.058, sedangkan kolom lain memiliki 1.470 data.
  - Artinya, terdapat **412 baris (≈28%)** yang tidak memiliki label `Attrition`.
  - ➔ Perlu ditangani sebelum modeling (bisa dengan *drop* atau *imputasi*).

- **Constant Features (Tidak Ada Variasi)**
  - `EmployeeCount` selalu bernilai 1.0.
  - `StandardHours` selalu bernilai 80.0.
  - ➔ Kolom-kolom ini tidak memberikan informasi dan **sebaiknya dihapus**.

2. Distribusi Target (`Attrition`)

- **Mean Attrition ≈ 0.169** ➔ Attrition rate sekitar **17%**.
- Berarti, sekitar **83% karyawan bertahan** dan **17% karyawan keluar**.
- ➔ Distribusi target cukup *imbalanced*, namun masih bisa ditangani.

3. Karakteristik Demografi & Pengalaman Kerja

- **Usia**
  - Rata-rata: 36.9 tahun.
  - Rentang: 18 – 60 tahun.
  
- **Total Working Years**
  - Rata-rata ≈ 11.3 tahun.
  - Median 10 tahun.
  - Maksimum hingga 40 tahun.
  
- **Years at Company**
  - Rata-rata ≈ 7 tahun.
  - Median 5 tahun.
  - Terdapat karyawan baru (min = 0).

➔ Banyak karyawan sudah bekerja cukup lama, tetapi juga ada banyak *new joiners*.

4. Jarak Rumah ke Kantor

- **Distance From Home**
  - Rata-rata ≈ 9.2 km.
  - Median ≈ 7 km.
  - 75% karyawan tinggal ≤14 km dari kantor.
  - Jarak maksimal hingga 29 km.

➔ Sebagian besar karyawan tinggal relatif dekat dengan kantor.

5. Aspek Kepuasan Kerja

- **Environment Satisfaction**
  - Mean ≈ 2.72 (skala 1–4).
  - Median 3 → Tingkat kepuasan cenderung "Medium–High".

- **Relationship Satisfaction**
  - Mean ≈ 2.71.
  - Median 3 → Mirip dengan environment satisfaction.

- **Work Life Balance**
  - Mean ≈ 2.76.
  - Median 3 → Mayoritas merasa "Good–Excellent" terkait keseimbangan kerja dan hidup.

➔ Umumnya kepuasan kerja dan work–life balance sudah positif, tetapi tetap ada ruang untuk perbaikan.

6. Gaji dan Insentif

- **Daily Rate**
  - Rata-rata: 802.

- **Hourly Rate**
  - Rata-rata: 65.

- **Stock Option Level**
  - Mean ≈ 0.79 (skala 0–3).

➔ Terdapat variasi besar dalam kompensasi.
➔ Penting untuk dianalisis apakah kompensasi berpengaruh terhadap keputusan keluar/bertahan.
"""

df.describe()

"""hasil visualisasi juga menunjukkan bahwa distribusi 0 (Tidak Attrition) lebih banyak dibanding dengan 1 (Attrition) yang artinya data ini tidak seimbang jika dilihat dari distibusi targetnya"""

#Distribusi target
sns.countplot(x='Attrition', data=df)
plt.title('Distribusi Attrition')
plt.show()

"""## Data Preparation / Preprocessing

Setelah kita mengetahui ada data yang kosong di `Attrition` maka kita perlu hapus data yang kosong itu, ada variabel yang tidak relevan yaitu `EmployeeId`, `Over18`, `StandardHours` maka kita hapus juga, dan ada variabel yang masih dalam bentuk object atau string maka kita perlu lakukan encoding agar datanya berupa numerik menggunakan LabelEncoder. setelah itu datanya distandarisasi menggunakan StandardScaler dan data yang tidak seimbang tadi kita perlu oversampling menggunakan Random Oversampling.
"""

def preprocess(df: pd.DataFrame) -> pd.DataFrame:
    # 1. Drop missing values
    df.dropna(inplace=True)
    # 2. Drop kolom yang tidak relevan
    df.drop(['EmployeeId', 'Over18', 'StandardHours'], axis=1, inplace=True)
    # 3. Encode kategori dengan LabelEncoder
    cat_cols = df.select_dtypes(include='object').columns
    for col in cat_cols:
        df[col] = LabelEncoder().fit_transform(df[col])
    # 4. Scaling numerik (kecuali target)
    num_cols = df.select_dtypes(include=[np.number]).columns.drop('Attrition')
    df[num_cols] = StandardScaler().fit_transform(df[num_cols])
    # 5. Oversampling kelas minoritas
    df_major = df[df.Attrition == 0]
    df_min = df[df.Attrition == 1]
    df_min_up = resample(
        df_min,
        replace=True,
        n_samples=len(df_major),
        random_state=42
    )
    df_bal = pd.concat([df_major, df_min_up]).sample(frac=1, random_state=42).reset_index(drop=True)
    return df_bal

# Terapkan preprocessing
df_pre = preprocess(df)
print("Distribusi kelas setelah oversampling:\n", df_pre['Attrition'].value_counts())
df_pre.head()

"""## Modeling

Disini kita pisahkan Fitur dengan Target, target nya adalah Attrition, lalu kita bagi datanya menjadi 80% untuk training dan 20% untuk testing, dan shape dataset tersebut adalah Training set: (1406, 31), Test set: (352, 31).

artinya :
1. data di training ada sebanyak 1406 data dengan 31 variabel
2. data di test ada sebanyak 352 dengan 31 variabel

ini masuk akal karena:
1. Data setelah oversampling jadi 1.758 baris (879 + 879).
2. 20% test → 0.2 × 1758 ≈ 352 test data.

Sisanya 1406 train data.
"""

X = df_pre.drop('Attrition', axis=1)
y = df_pre['Attrition']
X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.2,
    random_state=42,
    stratify=y
)
print(f"Training set: {X_train.shape}, Test set: {X_test.shape}")

"""**Insight Training Random Forest**

**Proses yang Dilakukan:**
- Model **RandomForest** telah dibuat dan dilatih menggunakan parameter default.
- Akurasi pada data training dihitung dan dicetak untuk melihat seberapa baik model mengenali pola dalam data training.

**Interpretasi Nilai Training Accuracy:**
-**training accuracy** sangat tinggi (1.0), itu **normal** untuk Random Forest karena ensemble tree biasanya sangat kuat di training set.
- Karena ini baru akurasi di **training set** saja, kita **belum bisa menilai generalisasi** model ke data baru (perlu cek akurasi di test set juga).

**Catatan:**
- Random Forest cenderung sangat kuat dalam menangkap pola di data training.
- Evaluasi lengkap baru bisa dilakukan setelah membandingkan hasil di **training** dan **testing**.

"""

# 1. Buat objek RandomForest dengan parameter default
rf = RandomForestClassifier(random_state=42)
# 2. Latih model pada data training
rf.fit(X_train, y_train)
# 3. Cetak skor pada data training untuk referensi
train_score = rf.score(X_train, y_train)
print(f"Training accuracy: {train_score:.4f}")

"""## Evaluation

**Insight Hasil Evaluasi Model Random Forest**

**Hasil Evaluasi di Data Test:**
- **Accuracy**: 97.73% (`Test accuracy: 0.9773`)
- **ROC AUC Score**: 0.999 (`ROC AUC Score: 0.9989992252066116`)

**Interpretasi:**
- Model sangat baik dalam membedakan karyawan yang **bertahan** (0.0) dan **keluar** (1.0).
- **Precision dan recall** tinggi di kedua kelas → sangat sedikit salah prediksi.
- **F1-score** seimbang di kedua kelas (0.98) → menunjukkan keseimbangan antara precision dan recall.
- **ROC AUC** hampir sempurna (0.999) → model sangat kuat dalam memisahkan dua kelas.
- Tidak terlihat gejala overfitting berat, karena **training accuracy** (sangat tinggi) masih cukup sejalan dengan **test accuracy**.

**Kesimpulan:**
- Model Random Forest ini sangat baik untuk tugas prediksi attrition.
- Bisa digunakan, namun sebaiknya tetap dilakukan validasi lebih lanjut seperti **cross-validation** untuk memastikan kestabilan performa model.
"""

# Prediksi pada data test
y_pred = rf.predict(X_test)
y_proba = rf.predict_proba(X_test)[:, 1]

# Laporan klasifikasi
print(classification_report(y_test, y_pred))
# ROC-AUC Score
roc_auc = roc_auc_score(y_test, y_proba)
print("ROC AUC Score:", roc_auc)
# Test Accuracy
test_acc = rf.score(X_test, y_test)
print(f"Test accuracy: {test_acc:.4f}")

# Simpan model Random Forest ke file
joblib.dump(rf, 'random_forest_model1.pkl')

print("Model berhasil disimpan sebagai 'random_forest_model.pkl'")

!pip install pipreqs

!pip install nbconvert pipreqs

# 1. Konversi notebook (misal pipeline.ipynb) jadi .py
!jupyter nbconvert --to script HRD.ipynb --output hrd

!sed '/^[!%]/d' hrd.txt > hrd_clean.py

!pipreqs . --force --savepath requirements.txt

!cat requirements.txt

"""# Identitifkasi Faktor Utama karyawan Attrition

Dari model Random Forest yang telah dibuat, kita mendapatkan "Feature Importance" — yaitu: Seberapa penting masing-masing fitur (kolom) dalam mempengaruhi keputusan karyawan keluar (attrition) atau tidak.
"""

# Mendapatkan feature importance
feature_importances = rf.feature_importances_

# Membuat dataframe untuk menampilkan feature dan importance-nya
feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})

# Mengurutkan berdasarkan importance tertinggi
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Menampilkan hasil
print(feature_importance_df)

"""# Kesimpulan : Insight Berdasarkan Hasil Feature Importance

### Faktor-faktor Utama yang Memengaruhi Attrition
1. **OverTime (0.0834)**:  
   Fitur ini memiliki importance tertinggi, menunjukkan bahwa **kelebihan jam kerja (overtime)** adalah faktor penting dalam mempengaruhi keputusan seorang karyawan untuk keluar dari perusahaan.

2. **Age (0.0671)**:  
   Usia karyawan juga menjadi faktor signifikan. Mungkin saja karyawan yang lebih tua atau lebih muda memiliki tingkat attrition yang berbeda.

3. **MonthlyIncome (0.0650)**:  
   Gaji bulanan memiliki pengaruh signifikan terhadap keputusan karyawan untuk bertahan atau keluar. Karyawan dengan penghasilan lebih rendah mungkin lebih cenderung untuk keluar.

4. **DailyRate (0.0549)**:  
   Ini juga berhubungan dengan kompensasi yang diterima karyawan, yang mungkin mempengaruhi keputusan mereka untuk bertahan.

5. **HourlyRate (0.0463)**:  
   Seperti halnya DailyRate, **hourly rate** juga menjadi indikator penting bagi keputusan attrition.

6. **TotalWorkingYears (0.0462)**:  
   Pengalaman kerja total seorang karyawan di perusahaan juga berperan. Mungkin karyawan yang lebih berpengalaman merasa lebih loyal atau justru lebih cenderung keluar setelah bertahun-tahun bekerja.

7. **MonthlyRate (0.0456)**:  
   Penghasilan bulanan yang diterima juga berpengaruh.

8. **DistanceFromHome (0.0450)**:  
   Jarak antara rumah dan tempat kerja dapat memengaruhi keputusan seorang karyawan untuk bertahan. Karyawan yang jauh dari kantor bisa jadi merasa lebih terbebani.

9. **YearsAtCompany (0.0438)**:  
   Lama bekerja di perusahaan juga memiliki pengaruh. Karyawan yang sudah lama bekerja mungkin merasa lebih nyaman atau justru sudah merasa jenuh dan ingin pindah.

### Faktor Lain yang Memengaruhi
- **EnvironmentSatisfaction (0.0399)** dan **WorkLifeBalance (0.0239)** menunjukkan bahwa kepuasan terhadap lingkungan kerja dan keseimbangan hidup juga berkontribusi terhadap keputusan attrition.
- **StockOptionLevel (0.0395)** dan **PercentSalaryHike (0.0279)** menunjukkan bahwa insentif finansial dan kenaikan gaji berpengaruh pada keputusan karyawan.
- **JobRole (0.0310)**, **JobSatisfaction (0.0292)**, dan **JobLevel (0.0281)** menggambarkan pentingnya kepuasan terhadap pekerjaan dan level jabatan dalam perusahaan.

### Faktor Minor
- **MaritalStatus (0.0216)**, **JobInvolvement (0.0211)**, dan **RelationshipSatisfaction (0.0208)** memberikan pengaruh lebih kecil, namun tetap relevan.
- Fitur seperti **BusinessTravel (0.0122)**, **Department (0.0099)**, dan **Gender (0.0086)** memiliki pengaruh yang lebih rendah dalam mempengaruhi attrition.

### Faktor yang Tidak Berpengaruh
- **EmployeeCount (0.0000)** menunjukkan bahwa kolom ini tidak memberikan informasi yang berguna dalam model dan bisa jadi tidak perlu digunakan untuk analisis lebih lanjut.

# Sehingga Daftar Pertanyaan yang dapat dibuat adalah:
1. Apakah karyawan yang lembur lebih cenderung keluar?
2. Bagaimana usia karyawan memengaruhi keputusan untuk bertahan atau keluar?
3. Bagaimana gaji bulanan (Monthly Income) memengaruhi tingkat attrition?
4. Apakah karyawan yang lebih berpengalaman atau lebih lama bekerja cenderung lebih loyal atau justru lebih sering keluar?
5. Seberapa besar pengaruh kepuasan kerja terhadap tingkat attrition?
6. Bagaimana pengaruh keseimbangan kerja dan kehidupan terhadap tingkat attrition?
7. Seberapa pentingkah peran lingkungan kerja dalam keputusan attrition?
8. Apakah karyawan dengan level stock option yang lebih tinggi lebih loyal?
9. Apakah kenaikan gaji yang lebih tinggi menurunkan tingkat turnover karyawan?
10. Apakah ada posisi pekerjaan tertentu yang memiliki tingkat keluar lebih tinggi?
11. Apakah karyawan di level jabatan tertentu lebih sering keluar?
12. Apakah jarak rumah ke kantor mempengaruhi karyawan untuk keluar?
"""